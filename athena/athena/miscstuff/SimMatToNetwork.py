# read in similarity matrix and entityInfo and build network
# downloads similarity Matrix and EntityInfo generated by spark.
import os
import json
import numpy as np
import pandas as pd
import boto3
from random import randint

from athena.algorithms.DataToNetwork.BuildResponseNetwork import simMatrixToNetwork
from athena.algorithms.Util.WriteNetwork import writeNetwork
from ..errors import AthenaError

#returns the downloaded path
def download_file_from_s3(fileName, bucket, key):
    print "downloading file from key: %s" % key
    fileObj = bucket.Object(key)
    file_path = '/tmp/' + str(randint(1,11111)) + '_' + fileName + '_' + key.split("/")[-1]
    fileObj.download_file(file_path)
    return file_path

class SimMatToNetwork(object):
    def __init__(self, id, recipeId):
        self.id = id
        self.recipeId = recipeId
        self.entity_download_path = None
        self.simMat_download_path = None

    def start(self, algoArgs):
        print "Starting SimMatToNetwork with options"
        print algoArgs 
        ###
        # Download entityInfo.csv and simMat.pickle2 from S3
        # generate network
        # upload it back to S3
        s3 = boto3.resource('s3')
        temp_bucket = s3.Bucket('mappr-temp')
        fileName = algoArgs["fileName"]
        destNetworkKey = algoArgs["destWorkbookKey"]
        # the saved file name
        saved_file_name = "/tmp/" + str(randint(1,11111)) + fileName + "_Network.xls"
        entity_download_path = download_file_from_s3(fileName, temp_bucket, algoArgs["entityInfoKey"])
        print "downloaded entity file to: %s" % entity_download_path
        simMat_download_path = download_file_from_s3(fileName, temp_bucket, algoArgs["simMatKey"])
        print "downloaded simMat file to: %s" % simMat_download_path
        
        self.entity_download_path = entity_download_path
        self.simMat_download_path = simMat_download_path

        df = pd.read_csv(entity_download_path)
        df['dataPointId'] = df['id'] = df.index
        nodeData = json.loads(df.to_json(orient='records'))

        # read in the similarity matrix
        simMat = np.load(simMat_download_path)

        if len(simMat) != len(nodeData):
            raise AthenaError("Error: simMat has %d entries, nodeData has %d entries, they should be equal"%(len(simMat), len(nodeData)))
        else:
            # build network with computed properties and layout from similarity matrix and entity list
            nwData = simMatrixToNetwork(simMat, nodeData)
            writeNetwork(saved_file_name, nwData['nodeData'], nwData['linkData'])
            print "written network file to %s" % saved_file_name
            s3.Bucket("mappr-user-datasources").Object(destNetworkKey).upload_file(saved_file_name)
            print "upload network file to %s" % destNetworkKey
            self.result = {
                'destNetworkKey' : destNetworkKey
            }
            self.status = "completed"



